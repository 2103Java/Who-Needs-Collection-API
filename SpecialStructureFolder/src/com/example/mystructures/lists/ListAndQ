package com.example;

import java.util.Set;

import com.example.mystructures.lists.MyList;


public class ListAndQ<E> implements ListAndQAbstract<E>
{
    private E[] internalArray;


    public MyListImpl(E... array ) {
        //var-args are dynamic, and can accept any number of arguments

        this.internalArray = array;
    }


    public boolean add(E e) {
        // TODO Auto-generated method stub

//		E[] newArray = new E[this.internalArray.length + 1];

        E[] newArray = (E[]) new Object[this.internalArray.length + 1];

        for(int i = 0; i < internalArray.length; i++) {
            newArray[i] = this.internalArray[i];
        }

        newArray[newArray.length - 1] = e;
        this.internalArray = newArray;

        return true;
    }

    E get(int index())
    {
        boolean isNotNull = true;

//        if (internalArray[index]!= null)
//        {
//            isNotNull = true;
//        }

        isNotNull:E e  = internalArray[index]; return e; ? return null;
        System.out.println(e);




    }

    public int getIndex(E e) {

        int index = -1;

        for(int i = 0; i < this.internalArray.length ; i++) {
            if(this.internalArray[i].equals(e)) {
                index = i;
                break;
            }
        }
        return index;
    }

    public boolean remove(int index) {

//		E[] newArray = new E[this.internalArray.length - 1];

        E[] newArray = (E[]) new Object[this.internalArray.length - 1];

        this.internalArray[index] = null;

        for(int i = 0; i < this.internalArray.length ; i++) {
            newArray[i] = this.internalArray[i];

            if(this.internalArray[i] == null) {

            }
        }



        return false;
    }

    boolean update(E e, int index)()
    {


    }




}